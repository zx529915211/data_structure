//
// Created by EDZ on 2023/11/20.
//

#include "SeqList.h"
#include <iostream>

using namespace std;

//通过构造函数进行顺序表初始化
template<typename T>
SeqList<T>::SeqList(int length) {
    m_data = new T[length];
    m_length = 0;
    m_maxsize = length;
}

//析构函数释放资源
template<typename T>
SeqList<T>::~SeqList() {
    delete[] m_data;
    m_length = 0;
}

/**
 * 在第i个位置插入元素，时间复杂度为O(n)，时间开销主要来自于元素的移动
 * @tparam T
 * @param i
 * @param e
 * @return
 */
template<typename T>
bool SeqList<T>::ListInsert(int i, const T &e) {
    if (m_length >= m_maxsize) {
        cout << "顺序表已满，扩容！" << endl;
        IncreaseSize();
    }
    if (i < 1 || i > (m_length + 1)) {
        cout << "元素插入的位置" << i << "不合法，合法的位置是1到" << m_length + 1 << endl;
        return false;
    }
    //插入位置后面的元素都要往后移
    for (int j = m_length; j >= i; --j) {
        m_data[j] = m_data[j - 1];
    }
    //插入元素
    m_data[i - 1] = e;
    m_length++;
    return true;
}

/**
 * 末尾追加元素
 * @tparam T
 * @param e
 * @return
 */
template<typename T>
bool SeqList<T>::PushBack(const T &e) {
    return ListInsert(m_length + 1, e);
}


/**
 * 删除第i个位置的元素
 * @tparam T
 * @param i
 * @return
 */
template<typename T>
bool SeqList<T>::ListDelete(int i) {
    if (i < 1) {
        cout << "删除的元素位置不合法" << endl;
        return false;
    }
    if (i > m_length) {
        cout << "删除的元素位置不对,该位置没有数据" << endl;
        return false;
    }
    for (int j = i; j < m_length; ++j) {
        m_data[j - 1] = m_data[j];
    }
    m_length--;
    return true;
}

/**
 * 删除第i个位置开始的step个元素
 * @tparam T
 * @param i
 * @param step
 * @return
 */
template<typename T>
bool SeqList<T>::ListDeleteByStep(int i, int step) {
    if (i + step > m_length) {
        cout << "删除的元素的范围超过元素数量" << endl;
    }
    if (i < 1) {
        cout << "删除元素的位置不对" << endl;
    }
    for (int j = i; j <= m_length - step; ++j) {
        m_data[j - 1] = m_data[j - 1 + step];
    }
    m_length -= step;
    return true;
}

/**
 * 获得第i个位置的元素值
 * @tparam T
 * @param i
 * @param e
 * @return
 */
template<typename T>
bool SeqList<T>::GetElem(int i, T &e) {
    if (i < 1 || i > m_length) {
        cout << "获取元素位置不合法" << endl;
        return false;
    }
    e = m_data[i - 1];
    return true;
}

//按元素值查找其在顺序表中第一次出现的位置
template<typename T>
int SeqList<T>::LocateElem(const T &e) {
    for (int i = 0; i <= m_length; ++i) {
        if (e == m_data[i]) {
            return i + 1;
        }
    }
    return -1;
}

//输出顺序表中的所有元素
template<typename T>
void SeqList<T>::DisplayList() {
    for (int i = 0; i < m_length; ++i) {
        cout << m_data[i] << endl;
    }
}

//获取顺序表的长度
template<typename T>
int SeqList<T>::ListLength() {
    return m_length;
}

//翻转顺序表
template<typename T>
void SeqList<T>::ReverseList() {
    if (m_length <= 1) {
        return;
    }
    int num = m_length / 2;
    T temp;
    for (int i = 0; i <= num; ++i) {
        temp = m_data[i];
        m_data[i] = m_data[m_length - i - 1];
        m_data[m_length - i - 1] = temp;
    }
}

//当顺序表存满数据后可以调用此函数为顺序表扩容
template<typename T>
void SeqList<T>::IncreaseSize() {
    T* old_data = m_data;
    m_maxsize = m_maxsize + IncSize;
    m_data = new T[m_maxsize];
    for (int i = 0; i < m_length; ++i) {
        m_data[i] = old_data[i];
    }
    delete[] old_data;
}
