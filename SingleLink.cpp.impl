//
// Created by EDZ on 2023/11/21.
//

#include "SingleLink.h"

template<typename T>
SingleLink<T>::SingleLink() {
    m_head = new Node<T>;//创建一个头结点
    m_head->next = nullptr;
    m_length = 0;
}

//在第i个位置插入指定元素e
template<typename T>
bool SingleLink<T>::ListInsert(int i, const T &e) {
    if (i < 1 || i > (m_length + 1)) {
        cout << "元素插入的位置不合法" << endl;
        return false;
    }
    Node<T> *p_curr = m_head;
    for (int j = 1; j < i; ++j) {
        p_curr = p_curr->next;
    }
    Node<T> *new_node = new Node<T>;
    new_node->data = e;
    new_node->next = p_curr->next;
    p_curr->next = new_node;
    m_length++;
    return true;
}

//在末尾追加元素
template<typename T>
bool SingleLink<T>::PushBack(const T &e) {
    return ListInsert(m_length + 1, e);
}

//删除第i个位置的元素
template<typename T>
bool SingleLink<T>::ListDelete(int i) {
    if (i < 1 || i > m_length) {
        cout << "元素删除的位置不合法" << endl;
        return false;
    }
    Node<T> *curr = m_head;
    for (int j = 1; j < i; ++j) {
        curr = curr->next;
    }
    Node<T> *del_ptr = curr->next;//指向待删除的节点
    curr->next = del_ptr->next;
    delete del_ptr;
    m_length--;
    return true;
}

//获得第i个位置的元素值
template<typename T>
bool SingleLink<T>::GetElem(int i, T &e) {
    if (i < 1 || i > m_length) {
        cout << "元素位置不合法" << endl;
        return false;
    }
    Node<T> *curr = m_head;
    for (int j = 0; j < i; ++j) {
        curr = curr->next;
    }
    e = curr->data;
    return true;

}

//按元素值查找其在单链表中第一次出现的位置
template<typename T>
int SingleLink<T>::LocateElem(const T &e) {
    if (m_length == 0) {
        cout << "链表里无数据!" << endl;
    }
    Node<T> *curr = m_head;
    for (int i = 1; i <= m_length; ++i) {
        curr = curr->next;
        if (curr->data == e) {
            return i;
        }
    }
    cout << "没有找到数据!" << endl;
    return -1;
}

//输出单链表中的所有元素
template<typename T>
void SingleLink<T>::DisplayList() {
    if (m_length == 0) {
        cout << "链表里无数据!" << endl;
    }
    Node<T> *curr = m_head->next;
    for (int i = 0; i < m_length; ++i) {
        cout << curr->data << endl;
        curr = curr->next;
    }
}

//获取单链表的长度
template<typename T>
int SingleLink<T>::ListLength() {
    return m_length;

}

//判断单链表是否为空
template<typename T>
bool SingleLink<T>::Empty() {
    return m_head->next == nullptr ? true : false;
}

//翻转单链表
template<typename T>
void SingleLink<T>::ReverseList() {
    if (m_length <= 1) {
        return;
    }
    Node<T> *curr = m_head->next->next;
    m_head->next->next = nullptr;

    Node<T> *temp = nullptr;
    while (curr != nullptr) {
        temp = curr;
        curr = curr->next;
        temp->next = m_head->next;
        m_head->next = temp;
    }
}

//释放单链表
template<typename T>
SingleLink<T>::~SingleLink() {
    Node<T> *curr = m_head->next;
    Node<T> *temp = nullptr;
    while (curr != nullptr) {
        temp = curr;
        curr = curr->next;
        delete temp;
    }
    delete m_head;
    m_head = nullptr;
    m_length = 0;
}